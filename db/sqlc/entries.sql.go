// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: entries.sql

package db

import (
	"context"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (
  account_id, ammount
) VALUES (
  $1, $2
)
RETURNING id, account_id, ammount, created_at
`

type CreateEntryParams struct {
	AccountID int64 `json:"account_id"`
	Ammount   int64 `json:"ammount"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entries, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.AccountID, arg.Ammount)
	var i Entries
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Ammount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEntriesByAccountId = `-- name: DeleteEntriesByAccountId :exec
DELETE FROM entries
  WHERE account_id = $1
`

func (q *Queries) DeleteEntriesByAccountId(ctx context.Context, accountID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntriesByAccountId, accountID)
	return err
}

const deleteEntryById = `-- name: DeleteEntryById :exec
DELETE FROM entries
WHERE id = $1
`

func (q *Queries) DeleteEntryById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntryById, id)
	return err
}

const getEntryByAccountId = `-- name: GetEntryByAccountId :one
SELECT id, account_id, ammount, created_at FROM entries WHERE account_id = $1 LIMIT 1
`

func (q *Queries) GetEntryByAccountId(ctx context.Context, accountID int64) (Entries, error) {
	row := q.db.QueryRowContext(ctx, getEntryByAccountId, accountID)
	var i Entries
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Ammount,
		&i.CreatedAt,
	)
	return i, err
}

const getEntryById = `-- name: GetEntryById :one
SELECT id, account_id, ammount, created_at FROM entries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntryById(ctx context.Context, id int64) (Entries, error) {
	row := q.db.QueryRowContext(ctx, getEntryById, id)
	var i Entries
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Ammount,
		&i.CreatedAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id, account_id, ammount, created_at FROM entries
ORDER BY account_id
LIMIT $1
OFFSET $2
`

type ListEntriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entries, error) {
	rows, err := q.db.QueryContext(ctx, listEntries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entries
	for rows.Next() {
		var i Entries
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Ammount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntry = `-- name: UpdateEntry :exec
UPDATE entries
  SET ammount = $2
WHERE id = $1
`

type UpdateEntryParams struct {
	ID      int64 `json:"id"`
	Ammount int64 `json:"ammount"`
}

func (q *Queries) UpdateEntry(ctx context.Context, arg UpdateEntryParams) error {
	_, err := q.db.ExecContext(ctx, updateEntry, arg.ID, arg.Ammount)
	return err
}
